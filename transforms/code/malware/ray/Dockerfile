FROM docker.io/rayproject/ray:2.24.0-py310 AS base

USER root
RUN apt -y update \
    && apt install -y clamav-daemon \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
USER ray

FROM docker.io/clamav/clamav:latest AS clamav
FROM base AS clamav-local
USER root
COPY --chown=ray:0 --from=clamav /var/lib/clamav/ /var/lib/clamav/
COPY --chown=ray:0 clamd.conf /etc/clamav/clamd.conf
RUN freshclam \
    && mkdir -p /var/run/clamav \
    && chown -R ray:0 /var/run/clamav /var/log/clamav /var/lib/clamav \
    && chmod -R 777 /var/run/clamav /var/log/clamav /var/lib/clamav
USER ray
CMD ["/bin/bash", "-c", "clamd --debug --foreground"]

FROM base AS builder-stage

ARG EXTRA_ARTIFACTORY_URL
ARG BUILD_DATE
ARG GIT_COMMIT

COPY --from=clamav-local --chown=ray:0 /var/lib/clamav/ /var/lib/clamav/
COPY --from=clamav-local --chown=ray:0 /etc/clamav/clamd.conf /etc/clamav/clamd.conf
COPY --from=clamav-local --chown=ray:0 /var/log/clamav /var/log/clamav
COPY --from=clamav-local --chown=ray:0 /var/run/clamav /var/run/clamav

# Copy in the data processing framework source/project and install it
# This is expected to be placed in the docker context before this is run (see the make image).
COPY --chown=ray:users data-processing-lib-python/ data-processing-lib-python/
RUN cd data-processing-lib-python && pip install --no-cache-dir -e .
COPY --chown=ray:users data-processing-lib-ray/ data-processing-lib-ray/ 
RUN cd data-processing-lib-ray    && pip install --no-cache-dir -e .
COPY --chown=ray:users python-transform/  python-transform/
RUN cd python-transform && pip install --no-cache-dir -e .

COPY --chown=ray:users src/ src/
COPY --chown=ray:users pyproject.toml pyproject.toml
RUN pip install --no-cache-dir -e .

ENV PYTHONPATH /home/ray

ONBUILD USER root
ONBUILD RUN rm -rf /var/log/clamav && mkdir -p /var/log/clamav && chown -R ray:0 /var/log/clamav
ONBUILD USER ray
ONBUILD RUN chmod -R 777 /var/run/clamav /var/log/clamav

## test stage

FROM builder-stage AS test
ARG EXECUTE_TESTS

# install pytest
RUN pip install --no-cache-dir pytest

# copy test
COPY --chown=ray:users test/ test/
COPY --chown=ray:users test-data/ test-data/
RUN if [ "${EXECUTE_TESTS}" = "true" ]; then echo "===> RUNNING TESTS"; export PYTHONPATH=$PYTHONPATH:../src && cd test && pytest .; fi

## final stage
FROM builder-stage

# copy source data
COPY src/malware_transform_ray.py  ./
COPY src/malware_local_ray.py  local/

# Put these at the end since they seem to upset the docker cache.
ARG BUILD_DATE
ARG GIT_COMMIT
LABEL build-date=$BUILD_DATE
LABEL git-commit=$GIT_COMMIT